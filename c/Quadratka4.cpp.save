#include <TXLib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <cmath>
//---------------------------------------------------------------------------------------------------------------------------------------

enum NUM_ROOTS {ZeroRoots = 0,
                OneRoot = 1,
                TwoRoots = 2,
                InfinityRoots = 3};

enum USER_MODE {
    SOLVE,
    TEST
};


static const double epsilon = 1e-8;
static const double EpsilonForTests = 1e-3;


NUM_ROOTS SolveEquatoin2 (double a, double b, double c, double* x1, double* x2);

void SortingCasesSE2(NUM_ROOTS QuantityRoots, double x1, double x2);

int IsNull(double s);

bool Input (double* a, double* b, double* c);

void SolvesCheckerSE2(double NumTest, double k1, double k2, double k3, double x1Correct, double x2Correct, NUM_ROOTS QuantityRootsCorrect,
                      double* x1, double* x2);

int IsFinite (double n);

int IsNAN (double n);

int IsInf (double n);

USER_MODE Intro();

void BiblioChecker(double* x1, double* x2);

bool Comparison (double k, double l);

bool ClearingInput ();


//---------------------------------------------------------------------------------------------------------------------------------------
int main()
{
    double a=0, b=0, c=0, x1=0, x2=0;

    USER_MODE Mode = Intro();

    if (Mode == SOLVE)
    {
        printf ("Введите значения коэффициентов квадратного уравнения вида ax^2+bx+c=0 в следующем порядке: a, b, c\n");
        
        if(!Input(&a, &b, &c)) return 0;
        
        NUM_ROOTS QuantityRoots = SolveEquatoin2(a, b, c, &x1, &x2);
        
        SortingCasesSE2(QuantityRoots, x1, x2);
     }

     if (Mode == TEST)
     {
        double NumTest = 0, k1 = 0, k2 = 0, k3 = 0, x1Correct = 0, x2Correct = 0;
        NUM_ROOTS QuantityRootsCorrect = ZeroRoots;
        BiblioChecker(&x1, &x2);
     }

     return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
bool Input (double* a, double* b, double* c)
{
    int NumInput = 0;
    NumInput = scanf ("%lg %lg %lg", a, b, c);

    ClearingInput ();

    while ((NumInput != 3) || (IsFinite(*a) != 1) || (IsFinite(*b) != 1) || (IsFinite(*c) != 1))
    {
        printf("Попробуй ещё раз\n");
        NumInput = scanf ("%lf %lf %lf", a, b, c);
        if(!ClearingInput ())
        {
            return 0;
        }
    }
}

//-----------------------------------------------------------------------------------------------------------------------------

NUM_ROOTS SolveEquatoin2 (double a, double b, double c, double* x1, double* x2)
{

    if (IsNull(a))
    {
        if (IsNull(b))
        {
            return IsNull(c) ? InfinityRoots : ZeroRoots;  // вынеси линейный и квалратный случаи в отдельные функции
        }
        else
        {
            *x1 = -c/b;
            return OneRoot;
        }
    }
    else
    {
        double d = b * b - 4 * a * c;

        if (IsNull(d))
        {
            *x1 = *x2=-b / (2 * a);
            return OneRoot;
        }

        if (d > 0)
        {
            double sqrt_d = sqrt(d);
            *x1 = (-b - sqrt_d)/(2 * a);
            *x2 = (-b + sqrt_d)/(2 * a);
            return TwoRoots;
        }

        return ZeroRoots;
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------

void SortingCasesSE2(NUM_ROOTS QuantityRoots, double x1, double x2)
{
    assert(x1 != NAN);
    assert(x2 != NAN);

    switch(QuantityRoots)
    {
      case ZeroRoots:
        printf("Нет корней");
        break;
      case OneRoot:
        printf("x = %lg\n", x1);
        break;
      case TwoRoots:
        printf("x1 = %lg, x2 = %lg\n", x1, x2);
        break;
      case InfinityRoots:
        printf("Бесконечно корней");
        break;                       // where defualt case???
    }
}

//--------------------------------------------------------------------------------------------------------------------------------------------



int IsNull(double s)
{
    return (-epsilon < s) && (s < epsilon);
}

//-------------------------------------------------------------------------------------------------------------------------------------

void SolvesCheckerSE2(double NumTest, double k1, double k2, double k3, double x1Correct, double x2Correct, NUM_ROOTS QuantityRootsCorrect,
                      double* x1, double* x2)
{
    *x1 = NAN;
    *x2 = NAN;
    NUM_ROOTS QuantityRoots = SolveEquatoin2(k1, k2, k3, x1, x2);


    if (QuantityRoots == TwoRoots)
    {
        if (QuantityRoots != QuantityRootsCorrect || !Comparison(*x1, x1Correct) || !Comparison(*x2, x2Correct))
        {
            printf ("Ошибка теста %lg: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, QuantityRoots = %d\n"
                    "Ожидаемый ответ: x1 = %lg, x2 = %lg, QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, *x1, *x2, QuantityRoots,
                    x1Correct, x2Correct, QuantityRootsCorrect);
        }
        else
        {
            printf ("Тест %lg пройден: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, *x1, *x2, QuantityRoots);
        }
    }


    else if (QuantityRoots == OneRoot)
    {
        if (QuantityRoots != QuantityRootsCorrect || !Comparison(*x1, x1Correct))
        {
            printf ("Ошибка теста %lg: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, QuantityRoots = %d\n"
                    "Ожидаемый ответ: x = %lg, QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, *x1, *x2, QuantityRoots,
                    x1Correct, QuantityRootsCorrect);
        }
        else
        {
            printf ("Тест %lg пройден: a = %lg, b = %lg, c = %lg, x = %lg, QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, *x1, QuantityRoots);
        }
    }


    else if (QuantityRoots == ZeroRoots)
    {
        if (QuantityRoots != QuantityRootsCorrect)
        {
            printf ("Ошибка теста %lg: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, QuantityRoots = %d\n"
                    "Ожидаемый ответ: QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, *x1, *x2, QuantityRoots,
                    QuantityRootsCorrect);
        }
        else
        {
            printf ("Тест %lg пройден: a = %lg, b = %lg, c = %lg, QuantityRoots = %d\n",
                    NumTest, k1, k2, k3, QuantityRoots);
        }
    }


    else if (QuantityRoots == InfinityRoots)
    {
        if (QuantityRoots != QuantityRootsCorrect)
        {
            printf ("Ошибка теста %lg: a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, QuantityRoots = %d\n"
                    "Ожидаемый ответ: QuantityRoots = InfinityRoots",
                    NumTest, k1, k2, k3,*x1, *x2, QuantityRoots);
        }else
        {
            printf ("Тест %lg пройден: a = %lg, b = %lg, c = %lg, QuantityRoots = InfinityRoots",
                    NumTest, k1, k2, k3, QuantityRoots);
        }
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------

USER_MODE Intro()
{
    printf ("Калькулятор решения квадратных уравнений\n");

    printf ("Выберите режим:\n"
            "Введите комманду TEST, чтобы тестировать калькулятор, или комманду SOLVE, чтобы решить уравнение\n");
    char command[6] = "";
    scanf ("%s", command);
    // fgets
    if (!strcmp(command,"SOLVE")) //command == solve
    {
        return SOLVE;
    }
    if (!strcmp(command,"TEST"))
    {
         return TEST;
    }
}

//------------------------------------------------------------------------------------------------------------------------------------

int IsFinite (double n)
{
    return !(IsInf(n) || IsNAN(n));
}

//-------------------------------------------------------------------------------------------------------------------------------------

int IsNAN (double n)
{
    return (n != n);
}

//-------------------------------------------------------------------------------------------------------------------------------------

int IsInf (double n)
{
    return (n * 0 != 0);
}

//--------------------------------------------------------------------------------------------------------------------------------------

void BiblioChecker(double* x1, double* x2)
{
    SolvesCheckerSE2(1, 1, 0, -4, -2, 2, TwoRoots, x1, x2);
    SolvesCheckerSE2(2, 0.6, 5.3, -12.2, -10.7285, 1.8952, TwoRoots, x1, x2);
    SolvesCheckerSE2(3, 1, 5.3, -12.2, -7.0343, 1.7343, TwoRoots, x1, x2);
    SolvesCheckerSE2(4, 5959, 5.89, -0.2, -0.0063, 0.0053, TwoRoots, x1, x2);
    SolvesCheckerSE2(5, 1, 7, 853, NAN, NAN, ZeroRoots, x1, x2);
    SolvesCheckerSE2(6, 1, 2, 1, -1, NAN, OneRoot, x1, x2);
    SolvesCheckerSE2(7, 0, 0, 0, NAN, NAN, InfinityRoots, x1, x2);
}

//---------------------------------------------------------------------------------------------------------------------------------------

bool Comparison (double k, double l)
{
    return ((EpsilonForTests > (k-l)) && ((k-l) > -EpsilonForTests));
}

//----------------------------------------------------------------------------------------------------------------------------------------

bool ClearingInput ()
{
     while ((getchar()) != '\n')
    {
        if ((getchar()) == EOF)
        {
            return 0;
        }

    }
}
